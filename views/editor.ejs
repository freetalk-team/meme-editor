<div class="cr fit noverflow">

	<%- include('tools.html') %>

	<div class="column relative noverflow" style="height: 100%; width:100%">
		<div id="notifications" class="top-right w3-margin-right" style="z-index:100;opacity:.9;"></div>

		<%- include('toolbar.html') %>

		<div class="row reverse noverflow fit" style="height:100%">

			<%- include('sidebar') %>
			
			<div class="column noverflow fit" style="height:100%;">
				<div class="canvas dnd-area hide">
					<canvas id="canvas" class="" tabindex="1" width="1200" height="900">Create meme with canvas</canvas>
				</div>

				<%- include('status.html') %>
			</div>
		</div>
	</div>
</div>


<template id="item-notification" class="w3-padding fade" style="min-width:200px;">
	{{dom.markdown(this)}}
</template>

<script type="module">

<% if (!production) { %>

import MemeEditor from '/editor.js';
	
<% } %>

const body = document.body;
const canvas = document.getElementById('canvas');

// const editor = new Editor(canvas, properties);
const editor = new MemeEditor(canvas);

editor.wrap();
editor.init();

wrapIconPopup('emoji');
wrapIconPopup('icon');


function wrapIconPopup(id) {

	const toggleButton = document.getElementById(id + '-button-popup');
	const popup = document.getElementById(id + '-popup');
	const tabs = popup.querySelectorAll('.tab');
	const tabContents = popup.querySelectorAll('.tab-content');

	// Toggle popup visibility
	toggleButton.addEventListener('click', (e) => {
		const popups = document.querySelectorAll('.icon-popup');
		for (const i of popups)
			if (i != popup)
				i.style.display = 'none';

		popup.style.display = popup.style.display === 'block' ? 'none' : 'block';
		e.stopPropagation();
	});

	// Handle tab switching
	tabs.forEach(tab => {
		tab.addEventListener('click', () => {
			// Remove active class from all tabs and tab contents
			tabs.forEach(t => t.classList.remove('active'));
			tabContents.forEach(content => content.classList.remove('active'));

			// Add active class to the selected tab and corresponding content
			tab.classList.add('active');
			document.getElementById(tab.getAttribute('data-tab')).classList.add('active');
		});
	});

	// Close the popup when clicking outside
	document.addEventListener('click', (event) => {
		if (!popup.contains(event.target) && event.target !== toggleButton) {
			popup.style.display = 'none';
		}
	});
	

	// Example: Handle icon selection
	const icons = popup.querySelectorAll('.icon-item');
	icons.forEach(icon => {
		icon.addEventListener('click', () => {

			let value = icon.textContent;

			if (id == 'icon') {
				const e = icon.firstElementChild;
				const v = window.getComputedStyle(e, '::before')
					.getPropertyValue('content')
					.replace(/['"]/g, ""); // Remove quotes from the value

				value = v.charAt(0);
			}

			editor.add(id, value);

			popup.style.display = 'none';
		});
	});
}

</script>
